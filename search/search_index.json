{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Purpose Markdown slides for technical conference talks by Gaurav Singh (a.k.a automationhacks) mostly but not limited to Software testing and automation These are: hand crafted with \u2764\ufe0f using markdown uses mkdocs-material to generate the static site hosted with \u2764\ufe0f on Github pages You can easily view this on the web by going to: https://automationhacks.io/slides/ And then clicking through Archive of past talks 2020 How to build an automation framework with selenium : patterns and practices , first delivered during Selenium Conference 2020, Bangalore. View CFP Build locally If you want to build the site locally, clone this repo and then execute below commands Note: You might want to use pipenv to setup python dependencies # activate pipenv pipenv install # View from local mkdocs serve","title":"Welcome"},{"location":"#welcome","text":"","title":"Welcome"},{"location":"#purpose","text":"Markdown slides for technical conference talks by Gaurav Singh (a.k.a automationhacks) mostly but not limited to Software testing and automation These are: hand crafted with \u2764\ufe0f using markdown uses mkdocs-material to generate the static site hosted with \u2764\ufe0f on Github pages You can easily view this on the web by going to: https://automationhacks.io/slides/ And then clicking through","title":"Purpose"},{"location":"#archive-of-past-talks","text":"2020 How to build an automation framework with selenium : patterns and practices , first delivered during Selenium Conference 2020, Bangalore. View CFP","title":"Archive of past talks"},{"location":"#build-locally","text":"If you want to build the site locally, clone this repo and then execute below commands Note: You might want to use pipenv to setup python dependencies # activate pipenv pipenv install # View from local mkdocs serve","title":"Build locally"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/00-about/","text":"About me Hi \ud83d\udc4b, I'm Gaurav Singh \ud83e\uddd4\ud83c\udffb\ud83d\udc68\u200d\ud83d\udcbb Who am I \ud83c\udfe1 Bengaluru, India \ud83c\uddee\ud83c\uddf3 Test Automation Lead at Gojek Built test frameworks in Kotlin, Python, Java for Web/Mobile/API \u2764\ufe0f exploratory testing and test automation Slides/Code Find the slides at automationhacks.io/slides Sample project with code: automationhacks/todo-mvc-automation-framework Talk video You can watch the Selenium Conf talk on this topic below: How to find me on the \ud83d\udd78 alias = automationhacks \ud83e\udd16 GitHub Blog: automationhacks.io Twitter LinkedIn","title":"About me"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/00-about/#about-me","text":"Hi \ud83d\udc4b, I'm Gaurav Singh \ud83e\uddd4\ud83c\udffb\ud83d\udc68\u200d\ud83d\udcbb","title":"About me"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/00-about/#who-am-i","text":"\ud83c\udfe1 Bengaluru, India \ud83c\uddee\ud83c\uddf3 Test Automation Lead at Gojek Built test frameworks in Kotlin, Python, Java for Web/Mobile/API \u2764\ufe0f exploratory testing and test automation","title":"Who am I"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/00-about/#slidescode","text":"Find the slides at automationhacks.io/slides Sample project with code: automationhacks/todo-mvc-automation-framework","title":"Slides/Code"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/00-about/#talk-video","text":"You can watch the Selenium Conf talk on this topic below:","title":"Talk video"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/00-about/#how-to-find-me-on-the","text":"alias = automationhacks \ud83e\udd16 GitHub Blog: automationhacks.io Twitter LinkedIn","title":"How to find me on the \ud83d\udd78"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/01-introduction/","text":"Introduction to building frameworks \ud83c\udfd7 What this talk is about \u2705 How? Building blocks? Some considerations Useful design patterns Anti patterns to avoid What this talk is not about \ud83d\ude45\ud83c\udffb\u200d\u2642\ufe0f In-depth discussion about selenium's API Definitive guide Perfect advice for all scenarios and contexts","title":"Introduction to building frameworks \ud83c\udfd7"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/01-introduction/#introduction-to-building-frameworks","text":"","title":"Introduction to building frameworks \ud83c\udfd7"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/01-introduction/#what-this-talk-is-about","text":"How? Building blocks? Some considerations Useful design patterns Anti patterns to avoid","title":"What this talk is about \u2705"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/01-introduction/#what-this-talk-is-not-about","text":"In-depth discussion about selenium's API Definitive guide Perfect advice for all scenarios and contexts","title":"What this talk is not about \ud83d\ude45\ud83c\udffb\u200d\u2642\ufe0f"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/02.0-language/","text":"Choosing a language \u270f\ufe0f Available choices Statically typed: Java, Kotlin, C#, TypeScript Compile time feedback. Yay! \ud83d\ude4c Dynamically typed: Python, JS, Ruby Flexible and quick to author tests (\ud83e\udd1e Without types \ud83d\ude04) How to decide \ud83e\udd14 Try to choose a language that devs also use Quality should be the whole team's responsibility Easy to learn and to find skilled people in Undergoing active development and has a thriving community Well defined ecosystem of tools/libraries Can't really go wrong with \ud83d\udc4d Python \ud83d\udc0d Java \ud83c\udf75/Kotlin JS Ruby \ud83e\udd2b Selenium/Appium has client bindings for above","title":"Choosing a language \u270f\ufe0f"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/02.0-language/#choosing-a-language","text":"Available choices Statically typed: Java, Kotlin, C#, TypeScript Compile time feedback. Yay! \ud83d\ude4c Dynamically typed: Python, JS, Ruby Flexible and quick to author tests (\ud83e\udd1e Without types \ud83d\ude04)","title":"Choosing a language \u270f\ufe0f"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/02.0-language/#how-to-decide","text":"Try to choose a language that devs also use Quality should be the whole team's responsibility Easy to learn and to find skilled people in Undergoing active development and has a thriving community Well defined ecosystem of tools/libraries","title":"How to decide \ud83e\udd14"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/02.0-language/#cant-really-go-wrong-with","text":"Python \ud83d\udc0d Java \ud83c\udf75/Kotlin JS Ruby \ud83e\udd2b Selenium/Appium has client bindings for above","title":"Can't really go wrong with \ud83d\udc4d"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/03.0-test_framework/","text":"Choosing a test framework and assertion lib \u2699\ufe0f Type JVM (Java/Kotlin) Python xUnit style JUnit, TestNG pytest, unittest BDD Cucumber Behave, pytest-bdd Think ! \ud83e\udd14\ufe0f Who would be the primary author of these tests? Developers, Automation engineers (Choose xUnit)? Product managers (PM), Manual testers (BDD can be an option)? xUnit style \ud83e\udd16 Benefits \u2795 Fast and flexible Setup/tear downs at different levels (Suite, Class, Test) Easy to data drive/parallelize tests Tradeoffs \u2796 Can be less readable (if not well designed) Tip: \ud83d\udca1 Write tests using arrange-act-assert pattern. BDD \ud83e\udd1d If you think Cucumber is a testing tool, please read on, because you are wrong. - Aslak Helles\u00f8y Reference: The worlds most misunderstood collaboration tool Benefits \u2795 Readable (Gherkin syntax with Given/When/Then/And ) Provides a layer to allow non-coders (PM/Manual test engineers) to also contribute More readable test results report Tradeoffs \u2796 Maintaining a BDD layer (feature files, step definitions) can be an overhead Less flexible (Trap \ud83d\udc7a) Feature files can be imperative instead of declarative Imperative Given I open a browser And I navigate to http://example.com/login When I type in the username field bob97 And I type in the password field F1d0 And I click on Submit button Then I should see the message Welcome Back Bob Declarative Given I am on the Login Page When I sign in with correct credentials Then I should see a welcome message Source: Sauce labs best practices for running tests Choosing an fluent assertion library \ud83d\udd75\ud83c\udffb\u200d\u2642\ufe0f Let's not reinvent the wheel \u2638\ufe0f shall we? \ud83d\ude04 Java/Kotlin Python Google Truth \u2b50\ufe0f assertpy \ud83c\udf1f Other choices: Hamcrest, Native JUnit or TestNG","title":"Choosing a test framework and assertion lib \u2699\ufe0f"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/03.0-test_framework/#choosing-a-test-framework-and-assertion-lib","text":"Type JVM (Java/Kotlin) Python xUnit style JUnit, TestNG pytest, unittest BDD Cucumber Behave, pytest-bdd Think ! \ud83e\udd14\ufe0f Who would be the primary author of these tests? Developers, Automation engineers (Choose xUnit)? Product managers (PM), Manual testers (BDD can be an option)?","title":"Choosing a test framework and assertion lib \u2699\ufe0f"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/03.0-test_framework/#xunit-style","text":"Benefits \u2795 Fast and flexible Setup/tear downs at different levels (Suite, Class, Test) Easy to data drive/parallelize tests Tradeoffs \u2796 Can be less readable (if not well designed) Tip: \ud83d\udca1 Write tests using arrange-act-assert pattern.","title":"xUnit style \ud83e\udd16"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/03.0-test_framework/#bdd","text":"If you think Cucumber is a testing tool, please read on, because you are wrong. - Aslak Helles\u00f8y Reference: The worlds most misunderstood collaboration tool Benefits \u2795 Readable (Gherkin syntax with Given/When/Then/And ) Provides a layer to allow non-coders (PM/Manual test engineers) to also contribute More readable test results report Tradeoffs \u2796 Maintaining a BDD layer (feature files, step definitions) can be an overhead Less flexible (Trap \ud83d\udc7a) Feature files can be imperative instead of declarative","title":"BDD \ud83e\udd1d"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/03.0-test_framework/#imperative","text":"Given I open a browser And I navigate to http://example.com/login When I type in the username field bob97 And I type in the password field F1d0 And I click on Submit button Then I should see the message Welcome Back Bob","title":"Imperative"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/03.0-test_framework/#declarative","text":"Given I am on the Login Page When I sign in with correct credentials Then I should see a welcome message Source: Sauce labs best practices for running tests","title":"Declarative"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/03.0-test_framework/#choosing-an-fluent-assertion-library","text":"Let's not reinvent the wheel \u2638\ufe0f shall we? \ud83d\ude04 Java/Kotlin Python Google Truth \u2b50\ufe0f assertpy \ud83c\udf1f Other choices: Hamcrest, Native JUnit or TestNG","title":"Choosing an fluent assertion library \ud83d\udd75\ud83c\udffb\u200d\u2642\ufe0f"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/04.0-reporting/","text":"Logging/reporting \ud83d\udcc8 How to choose \ud83e\udd14 Easy to see exception stack traces Quickly see failed assertions and associated inputs/logs quickly Good overview of pass/fail/skipped metrics Should have historical results comparison Some available reporting framework choices Native Gradle reports Cucumber reports External Report portal \ud83e\udd18\ud83c\udffc Allure Extent reports","title":"Logging/reporting \ud83d\udcc8"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/04.0-reporting/#loggingreporting","text":"","title":"Logging/reporting \ud83d\udcc8"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/04.0-reporting/#how-to-choose","text":"Easy to see exception stack traces Quickly see failed assertions and associated inputs/logs quickly Good overview of pass/fail/skipped metrics Should have historical results comparison","title":"How to choose \ud83e\udd14"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/04.0-reporting/#some-available-reporting-framework-choices","text":"","title":"Some available reporting framework choices"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/04.0-reporting/#native","text":"Gradle reports Cucumber reports","title":"Native"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/04.0-reporting/#external","text":"Report portal \ud83e\udd18\ud83c\udffc Allure Extent reports","title":"External"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/05.0-ci/","text":"Continuous Integration (CI) \ud83c\udfc3\ud83c\udffb\u200d\u2642\ufe0f Jenkins \ud83d\udc68\ud83c\udffb\u200d\ud83c\udf73 CI Used by your project/org Key practices Maximize your tests value by setting up your tests in CI from the start Setup smoke tests for every build Setup regression on a nightly basis Tip: \ud83d\udca1 Keep test suites always healthy \ud83c\udfe5 Available choices Azure pipelines, GitLab, TravisCI, CircleCI, ...","title":"Continuous Integration (CI) \ud83c\udfc3\ud83c\udffb\u200d\u2642\ufe0f"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/05.0-ci/#continuous-integration-ci","text":"Jenkins \ud83d\udc68\ud83c\udffb\u200d\ud83c\udf73 CI Used by your project/org","title":"Continuous Integration (CI) \ud83c\udfc3\ud83c\udffb\u200d\u2642\ufe0f"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/05.0-ci/#key-practices","text":"Maximize your tests value by setting up your tests in CI from the start Setup smoke tests for every build Setup regression on a nightly basis Tip: \ud83d\udca1 Keep test suites always healthy \ud83c\udfe5","title":"Key practices"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/05.0-ci/#available-choices","text":"Azure pipelines, GitLab, TravisCI, CircleCI, ...","title":"Available choices"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/06.0-grid/","text":"In house vs cloud Selenium Grid In house \ud83c\udfe0 Benefits \u2795 Less Cost \ud83d\ude09 \ud83d\ude4c More control and Customization \ud83d\udc68\u200d\ud83d\udcbb Tradeoffs \u2796 Maintenance overhead \ud83d\ude4d\ud83c\udffb\u200d\u2642\ufe0f Need dedicated team to maintain Limit to no of VM/containers Cloud \ud83c\udf29 Benefits \u2795 Availability and outsourced Management Large no of platform/browser combinations Monitoring/dashboards Tradeoffs \u2796 More Cost \ud83e\udd11 Network latency \ud83d\udeb6 Data Security \ud83d\udda5 Some Available choices SauceLabs, BrowserStack, Applitools Ultrafast grid, Perfecto, HeadSpin ...","title":"In house vs cloud"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/06.0-grid/#in-house-vs-cloud","text":"Selenium Grid","title":"In house vs cloud"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/06.0-grid/#in-house","text":"Benefits \u2795 Less Cost \ud83d\ude09 \ud83d\ude4c More control and Customization \ud83d\udc68\u200d\ud83d\udcbb Tradeoffs \u2796 Maintenance overhead \ud83d\ude4d\ud83c\udffb\u200d\u2642\ufe0f Need dedicated team to maintain Limit to no of VM/containers","title":"In house \ud83c\udfe0"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/06.0-grid/#cloud","text":"Benefits \u2795 Availability and outsourced Management Large no of platform/browser combinations Monitoring/dashboards Tradeoffs \u2796 More Cost \ud83e\udd11 Network latency \ud83d\udeb6 Data Security \ud83d\udda5","title":"Cloud \ud83c\udf29"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/06.0-grid/#some-available-choices","text":"SauceLabs, BrowserStack, Applitools Ultrafast grid, Perfecto, HeadSpin ...","title":"Some Available choices"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/07.0-patterns/","text":"Sensible patterns and practices \ud83d\ude07 Atomic tests \u269b\ufe0f Write targeted tests No more than 2 assertions per test 2\ufe0f\u20e3 Outcome of one test should not cause another to fail \ud83d\udca1Follow TRIMS \ud83d\udc4d- Richard Bradshaw, Ministry of testing Use explicit waits \ud83d\uded1 Avoid writing hardcoded sleeps/implicit waits Use API \u2699\ufe0f or DB for data setup/teardown Set application state \u23e9 using: API Inject JS Cookies Modify DB Arrange act assert \u2764\ufe0f Setup state => Perform a test => Assert => Cleanup Run tests in parallel from the start \ud83c\udfc3 \ud83c\udfc3 \ud83c\udfc3 Atomic tests + parallel \ud83e\udd1d Use Selenium Grid \ud83d\udc4d Create a new webdriver instance for every test Don't use static keyword/shared state Page object Write page objects for components within pages Naming that clarifies intent Fluent pattern \ud83c\udfc3 @Test(groups = Tags.REGRESSION) public void testToDoItemsLeft() { HomePage home = new HomePage(driver); home.addTodo(\"Get work done\"); home.addTodo(\"relax\"); ... } @Test(groups = Tags.REGRESSION) public void testToDoItemsLeft() { // More readable \ud83d\ude04 HomePage home = new HomePage(driver) .addTodo(\"Get work done\") .addTodo(\"relax\"); ... } How is this enabled? \ud83d\udca1return either the current page object or the next page object to enable fluent methods public HomePage addTodo(String todoNote) { enterText(todo, todoNote); pressEnter(todo); return this; } Can use this in assertions as well // TestNG assert Assert.assertEquals(addedTodosText, note); // Google truths fluent assert assertThat(addedTodosText).isEqualTo(note); Page factory Easily specify WebElement/s to be found Use @CacheLookup to keep WebElement for static elements public class HomePage extends BasePage { public HomePage(WebDriver driver) { super(driver); PageFactory.initElements(driver, this); } @FindBy(css = \"#root input\") WebElement todo; @FindBy(xpath = \"//ul[@class='todo-list']//label\") List<WebElement> todos; String addedNote = \"//ul[@class='todo-list']//label[contains(text(), '%s')]\"; ... public HomePage addTodo(String todoNote) { enterText(todo, todoNote); pressEnter(todo); return this; } ... } Screenplay pattern Follows SOLID principles and takes a user centric view of writing automated acceptance tests Check out Serenity BDD Builder pattern Use this to construct complex data objects instead of multiple constructor params","title":"Sensible patterns and practices \ud83d\ude07"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/07.0-patterns/#sensible-patterns-and-practices","text":"","title":"Sensible patterns and practices \ud83d\ude07"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/07.0-patterns/#atomic-tests","text":"Write targeted tests No more than 2 assertions per test 2\ufe0f\u20e3 Outcome of one test should not cause another to fail \ud83d\udca1Follow TRIMS \ud83d\udc4d- Richard Bradshaw, Ministry of testing","title":"Atomic tests \u269b\ufe0f"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/07.0-patterns/#use-explicit-waits","text":"Avoid writing hardcoded sleeps/implicit waits","title":"Use explicit waits \ud83d\uded1"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/07.0-patterns/#use-api-or-db-for-data-setupteardown","text":"Set application state \u23e9 using: API Inject JS Cookies Modify DB","title":"Use API \u2699\ufe0f or DB for data setup/teardown"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/07.0-patterns/#arrange-act-assert","text":"Setup state => Perform a test => Assert => Cleanup","title":"Arrange act assert \u2764\ufe0f"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/07.0-patterns/#run-tests-in-parallel-from-the-start","text":"Atomic tests + parallel \ud83e\udd1d Use Selenium Grid \ud83d\udc4d Create a new webdriver instance for every test Don't use static keyword/shared state","title":"Run tests in parallel from the start \ud83c\udfc3 \ud83c\udfc3 \ud83c\udfc3"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/07.0-patterns/#page-object","text":"Write page objects for components within pages Naming that clarifies intent","title":"Page object"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/07.0-patterns/#fluent-pattern","text":"@Test(groups = Tags.REGRESSION) public void testToDoItemsLeft() { HomePage home = new HomePage(driver); home.addTodo(\"Get work done\"); home.addTodo(\"relax\"); ... } @Test(groups = Tags.REGRESSION) public void testToDoItemsLeft() { // More readable \ud83d\ude04 HomePage home = new HomePage(driver) .addTodo(\"Get work done\") .addTodo(\"relax\"); ... } How is this enabled? \ud83d\udca1return either the current page object or the next page object to enable fluent methods public HomePage addTodo(String todoNote) { enterText(todo, todoNote); pressEnter(todo); return this; } Can use this in assertions as well // TestNG assert Assert.assertEquals(addedTodosText, note); // Google truths fluent assert assertThat(addedTodosText).isEqualTo(note);","title":"Fluent pattern \ud83c\udfc3"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/07.0-patterns/#page-factory","text":"Easily specify WebElement/s to be found Use @CacheLookup to keep WebElement for static elements public class HomePage extends BasePage { public HomePage(WebDriver driver) { super(driver); PageFactory.initElements(driver, this); } @FindBy(css = \"#root input\") WebElement todo; @FindBy(xpath = \"//ul[@class='todo-list']//label\") List<WebElement> todos; String addedNote = \"//ul[@class='todo-list']//label[contains(text(), '%s')]\"; ... public HomePage addTodo(String todoNote) { enterText(todo, todoNote); pressEnter(todo); return this; } ... }","title":"Page factory"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/07.0-patterns/#screenplay-pattern","text":"Follows SOLID principles and takes a user centric view of writing automated acceptance tests Check out Serenity BDD","title":"Screenplay pattern"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/07.0-patterns/#builder-pattern","text":"Use this to construct complex data objects instead of multiple constructor params","title":"Builder pattern"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/08.0-anti-patterns/","text":"Avoid these anti patterns Assertions in page objects \ud83d\udcc3 Asserts should be tests responsibility Only a single assert that verifies page/elements are loaded properly \u2705 Webdriver methods in tests/page objects If you have WebDriver APIs in your test methods, You're Doing It Wrong. -- Simon Stewart. Follow DRY (Don't repeat yourself) \u2694\ufe0f \ud83d\udd01 Put common wrappers in a BasePage class Long E2E tests with multiple actions and assertions Debugging nightmare \ud83d\ude31 Might cause bugs to be discovered later if earlier steps fails Writing too much UI automation \ud83d\udca1 Less is more DO NOT test everything from the app Write tests for more visual aspects Prefer to write Functional API tests or Integration/Unit tests instead Replace exploratory testing Automated tests can automate checks and be good change detectors Exploratory testing with automation is \ud83d\udcaf% valuable","title":"Avoid these anti patterns"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/08.0-anti-patterns/#avoid-these-anti-patterns","text":"","title":"Avoid these anti patterns"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/08.0-anti-patterns/#assertions-in-page-objects","text":"Asserts should be tests responsibility Only a single assert that verifies page/elements are loaded properly \u2705","title":"Assertions in page objects \ud83d\udcc3"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/08.0-anti-patterns/#webdriver-methods-in-testspage-objects","text":"If you have WebDriver APIs in your test methods, You're Doing It Wrong. -- Simon Stewart. Follow DRY (Don't repeat yourself) \u2694\ufe0f \ud83d\udd01 Put common wrappers in a BasePage class","title":"Webdriver methods in tests/page objects"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/08.0-anti-patterns/#long-e2e-tests-with-multiple-actions-and-assertions","text":"Debugging nightmare \ud83d\ude31 Might cause bugs to be discovered later if earlier steps fails","title":"Long E2E tests with multiple actions and assertions"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/08.0-anti-patterns/#writing-too-much-ui-automation","text":"\ud83d\udca1 Less is more DO NOT test everything from the app Write tests for more visual aspects Prefer to write Functional API tests or Integration/Unit tests instead","title":"Writing too much UI automation"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/08.0-anti-patterns/#replace-exploratory-testing","text":"Automated tests can automate checks and be good change detectors Exploratory testing with automation is \ud83d\udcaf% valuable","title":"Replace exploratory testing"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/09.0-next-steps/","text":"Next steps: Where do you go from here Learn constantly , experiment and apply these in your automation develop your own heuristics. \ud83d\ude09 On Automation Automation pyramid - Nikolay Advolodkin Automation patterns and anti patterns - Nikolay Advolodkin Achieving parallel test execution in automation - Nikolay Advolodkin Page object - Nikolay Advolodkin Automation best practices - Nikolay Advolodkin Your Tests Aren\u2019t Flaky, You Are! | Richard Bradshaw Good practices for running tests Continuous delivery in VSTS How we approach testing VSTS to enable continuous delivery - Brian harry Microsoft On BDD and cucumber Writing good gherkin - Automation panda The world's most misunderstood collaboration tool by Aslak Helles\u00f8y A case against cucumber - Hackernews thread Running selenium tests in parallel Parallel Testing in Java with Maven and TestNG Troubleshooting problems with parallel tests in Java Use of ThreadLocal webdriver On patterns Page objects Page object models - Selenium.dev Tips for healthy page objects - Angie jones Page object - Martinfowler.com Fluent pattern Fluent Interface - Martin Fowler Fun With Fluent Testing - Andrew Krug Page factory Selenium design patterns - Dzone CacheLookup in Page factory Screenplay pattern Screenplay pattern Clean tests Arrange act assert Builder Builder pattern Learn about API automation Beaufort fairmont OnTestAutomation - Bas Dijkstra More best practices/anti patterns to avoid Guidelines from selenium.dev Bad practices","title":"Next steps: Where do you go from here"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/09.0-next-steps/#next-steps-where-do-you-go-from-here","text":"Learn constantly , experiment and apply these in your automation develop your own heuristics. \ud83d\ude09","title":"Next steps: Where do you go from here"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/09.0-next-steps/#on-automation","text":"Automation pyramid - Nikolay Advolodkin Automation patterns and anti patterns - Nikolay Advolodkin Achieving parallel test execution in automation - Nikolay Advolodkin Page object - Nikolay Advolodkin Automation best practices - Nikolay Advolodkin Your Tests Aren\u2019t Flaky, You Are! | Richard Bradshaw Good practices for running tests","title":"On Automation"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/09.0-next-steps/#continuous-delivery-in-vsts","text":"How we approach testing VSTS to enable continuous delivery - Brian harry Microsoft","title":"Continuous delivery in VSTS"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/09.0-next-steps/#on-bdd-and-cucumber","text":"Writing good gherkin - Automation panda The world's most misunderstood collaboration tool by Aslak Helles\u00f8y A case against cucumber - Hackernews thread","title":"On BDD and cucumber"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/09.0-next-steps/#running-selenium-tests-in-parallel","text":"Parallel Testing in Java with Maven and TestNG Troubleshooting problems with parallel tests in Java Use of ThreadLocal webdriver","title":"Running selenium tests in parallel"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/09.0-next-steps/#on-patterns","text":"","title":"On patterns"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/09.0-next-steps/#page-objects","text":"Page object models - Selenium.dev Tips for healthy page objects - Angie jones Page object - Martinfowler.com","title":"Page objects"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/09.0-next-steps/#fluent-pattern","text":"Fluent Interface - Martin Fowler Fun With Fluent Testing - Andrew Krug","title":"Fluent pattern"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/09.0-next-steps/#page-factory","text":"Selenium design patterns - Dzone CacheLookup in Page factory","title":"Page factory"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/09.0-next-steps/#screenplay-pattern","text":"Screenplay pattern","title":"Screenplay pattern"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/09.0-next-steps/#clean-tests","text":"Arrange act assert","title":"Clean tests"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/09.0-next-steps/#builder","text":"Builder pattern","title":"Builder"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/09.0-next-steps/#learn-about-api-automation","text":"Beaufort fairmont OnTestAutomation - Bas Dijkstra","title":"Learn about API automation"},{"location":"2020/se-conf/how-to-build-an-automation-framework-with-selenium/09.0-next-steps/#more-best-practicesanti-patterns-to-avoid","text":"Guidelines from selenium.dev Bad practices","title":"More best practices/anti patterns to avoid"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/00-welcome/","text":"Hello Appium! Setting up your First Appium Tests efficiently \ud83d\udc4b Why this talk? I started learning Appium back in 2018 for work \ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbb I remember struggling for 3 odd days just to get appium setup and run my first test on android \ud83e\udd26 I want to save you \ud83e\udd1e that pain Let's make getting started with Appium easier","title":"Hello Appium! Setting up your First Appium Tests efficiently \ud83d\udc4b"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/00-welcome/#hello-appium-setting-up-your-first-appium-tests-efficiently","text":"","title":"Hello Appium! Setting up your First Appium Tests efficiently \ud83d\udc4b"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/00-welcome/#why-this-talk","text":"I started learning Appium back in 2018 for work \ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbb I remember struggling for 3 odd days just to get appium setup and run my first test on android \ud83e\udd26 I want to save you \ud83e\udd1e that pain Let's make getting started with Appium easier","title":"Why this talk?"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/01-whoami/","text":"About me \ud83e\uddd1\u200d\ud83d\udcbb Hi \ud83d\udc4b, I'm Gaurav Singh \ud83e\uddd4\ud83c\udffb\ud83d\udc68\u200d\ud83d\udcbb ~ whoami Experienced Software engineer in Test in \ud83c\udfe1 Bangalore, India \ud83c\uddee\ud83c\uddf3 Engineering Manager SDET at Gojek (SEA GoTo ecosystem for on demand services). Btw, \ud83d\udfe2 We are hiring \ud83d\ude0d. Check us out at Gojek careers Enjoy building scalable test frameworks and tools for Web/Mobile/API and high performing teams Polyglot programmer with experience in Kotlin, Java, Python, JavaScript Proud Tester, \u2764\ufe0f Exploratory Testing Test automation university instructor and conference speaker Slides/Code You can find the slides over at automationhacks.io/slides and then click on 2021 tab Boilerplate project for setup: automationhacks/appium-fast-boilerplate Video on YouTube How to find me on the \ud83d\udd78 Usually go by alias = automationhacks \ud83e\udd16 automationhacks.io Twitter LinkedIn GitHub","title":"About me \ud83e\uddd1\u200d\ud83d\udcbb"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/01-whoami/#about-me","text":"Hi \ud83d\udc4b, I'm Gaurav Singh \ud83e\uddd4\ud83c\udffb\ud83d\udc68\u200d\ud83d\udcbb","title":"About me \ud83e\uddd1\u200d\ud83d\udcbb"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/01-whoami/#whoami","text":"Experienced Software engineer in Test in \ud83c\udfe1 Bangalore, India \ud83c\uddee\ud83c\uddf3 Engineering Manager SDET at Gojek (SEA GoTo ecosystem for on demand services). Btw, \ud83d\udfe2 We are hiring \ud83d\ude0d. Check us out at Gojek careers Enjoy building scalable test frameworks and tools for Web/Mobile/API and high performing teams Polyglot programmer with experience in Kotlin, Java, Python, JavaScript Proud Tester, \u2764\ufe0f Exploratory Testing Test automation university instructor and conference speaker","title":"~ whoami"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/01-whoami/#slidescode","text":"You can find the slides over at automationhacks.io/slides and then click on 2021 tab Boilerplate project for setup: automationhacks/appium-fast-boilerplate","title":"Slides/Code"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/01-whoami/#video-on-youtube","text":"","title":"Video on YouTube"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/01-whoami/#how-to-find-me-on-the","text":"Usually go by alias = automationhacks \ud83e\udd16 automationhacks.io Twitter LinkedIn GitHub","title":"How to find me on the \ud83d\udd78"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/02-intro-to-appium/","text":"Introduction to appium \ud83d\udcf1 What is appium?\ud83d\udcf1 Open source library to drive mobile apps ( native, hybrid and mobile web apps on platforms like Android, iOS and desktop and many more \ud83d\ude80) Choose language binding of your choice ( Java, Python, JavaScript, Ruby, C# ... \ud83c\udd93) Does not reinvent the wheel and wraps automation libraries (Google UI Automator2/Espresso , Apple XCUITest/UIAutomation , Windows WinApp ) No requirement of SDK or recompilation of the app Compliant with Web driver protocol Works on all platforms (Windows, Mac, Linux) Core concepts Client server architecture Session Desired capabilities Appium Server Appium Clients Appium Desktop Client server Appium is a web server that exposes REST APIs Typical request flow Server receives connection from client Server listens for commands Client makes a request to Server which gets executed on device Server returns an HTTP response Session Each action happens within a sessions context We start a session with a Desired capabilities object to specify the type of connection we want Desired capabilities Hash map with key being different capabilities and values with specific configurations Appium Server Node.js server that bridges commands to native frameworks from vendors (Google, Apple) Appium Clients Clients that adhere to WebDriver protocol and exposes actions Test code uses these clients to perform desired actions on devices Appium Desktop Desktop app to support identifying elements and aid writing automated tests References Introduction to Appium","title":"Introduction to appium \ud83d\udcf1"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/02-intro-to-appium/#introduction-to-appium","text":"","title":"Introduction to appium \ud83d\udcf1"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/02-intro-to-appium/#what-is-appium","text":"Open source library to drive mobile apps ( native, hybrid and mobile web apps on platforms like Android, iOS and desktop and many more \ud83d\ude80) Choose language binding of your choice ( Java, Python, JavaScript, Ruby, C# ... \ud83c\udd93) Does not reinvent the wheel and wraps automation libraries (Google UI Automator2/Espresso , Apple XCUITest/UIAutomation , Windows WinApp ) No requirement of SDK or recompilation of the app Compliant with Web driver protocol Works on all platforms (Windows, Mac, Linux)","title":"What is appium?\ud83d\udcf1"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/02-intro-to-appium/#core-concepts","text":"Client server architecture Session Desired capabilities Appium Server Appium Clients Appium Desktop","title":"Core concepts"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/02-intro-to-appium/#client-server","text":"Appium is a web server that exposes REST APIs Typical request flow Server receives connection from client Server listens for commands Client makes a request to Server which gets executed on device Server returns an HTTP response","title":"Client server"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/02-intro-to-appium/#session","text":"Each action happens within a sessions context We start a session with a Desired capabilities object to specify the type of connection we want","title":"Session"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/02-intro-to-appium/#desired-capabilities","text":"Hash map with key being different capabilities and values with specific configurations","title":"Desired capabilities"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/02-intro-to-appium/#appium-server","text":"Node.js server that bridges commands to native frameworks from vendors (Google, Apple)","title":"Appium Server"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/02-intro-to-appium/#appium-clients","text":"Clients that adhere to WebDriver protocol and exposes actions Test code uses these clients to perform desired actions on devices","title":"Appium Clients"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/02-intro-to-appium/#appium-desktop","text":"Desktop app to support identifying elements and aid writing automated tests","title":"Appium Desktop"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/02-intro-to-appium/#references","text":"Introduction to Appium","title":"References"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/03-setup/","text":"What do you need to start? \ud83e\uddf0 Language, IDE, Build tool Java IntelliJ Gradle Or choose a language ecosystem of your choice For iOS Xcode with command line tools For Android Android SDK > 16 Android Studio Tools Homebrew - General package manager Node - JavaScript runtime built on Chrome's V8 JavaScript engine NPM - Package manager for JS Appium Server - Exposes REST API for mobile automation Appium Desktop - Desktop app to help inspect and automate apps Don't worry, we'll install all these step by step. \ud83d\ude09","title":"What do you need to start? \ud83e\uddf0"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/03-setup/#what-do-you-need-to-start","text":"","title":"What do you need to start? \ud83e\uddf0"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/03-setup/#language-ide-build-tool","text":"Java IntelliJ Gradle Or choose a language ecosystem of your choice","title":"Language, IDE, Build tool"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/03-setup/#for-ios","text":"Xcode with command line tools","title":"For iOS"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/03-setup/#for-android","text":"Android SDK > 16 Android Studio","title":"For Android"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/03-setup/#tools","text":"Homebrew - General package manager Node - JavaScript runtime built on Chrome's V8 JavaScript engine NPM - Package manager for JS Appium Server - Exposes REST API for mobile automation Appium Desktop - Desktop app to help inspect and automate apps Don't worry, we'll install all these step by step. \ud83d\ude09","title":"Tools"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/04-common-libraries/","text":"Common libraries and setup \u2692\ufe0f Step 1: Install homebrew We'll need it to install npm and node Install instructions To Install on macOS /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\" On Linux or WSL (Windows subsystem for linux): You may need to install linuxbrew Step 2: Install node and npm Instructions Download and install node (10+) for your platform Prefer choosing LTS (Long term support version) On macOS: brew install node Verify running below command returns version: node -v And verify for npm as well npm -v Step 3: Install Appium server Run below command: npm install -g appium \ud83d\udd3a Do not use sudo to install appium server -g indicates that this package would be installed globally Verify appium server is installed \u279c appium-fast-boilerplate git:(main) appium [Appium] Welcome to Appium v1.17.0 [Appium] Appium REST http interface listener started on 0.0.0.0:4723 You will see all server logs in this terminal window. Appium 2.0 \ud83d\ude80 To install appium 2.0 npm install -g appium@next You'll get an output like /usr/local/bin/appium -> /usr/local/lib/node_modules/appium/build/lib/main.js > appium@2.0.0-beta.16 postinstall /usr/local/lib/node_modules/appium > node ./postinstall.js Not auto-installing any drivers or plugins + appium@2.0.0-beta.16 added 113 packages from 587 contributors, removed 316 packages, updated 136 packages and moved 5 packages in 81.611s Next up, We'll install android and iOS drivers for this project appium driver install xcuitest appium driver install uiautomator2 You can list all available drivers using appium driver list Or only installed drivers using appium driver list --installed After running appium command, you'll see an output like this and as you can see our installed drivers [Appium] Welcome to Appium v2.0.0-beta.16 [Appium] Non-default server args: [Appium] tmpDir: /var/folders/5d/flg6q03n3j7769kffzly2x_r0000gp/T [Appium] Attempting to load driver xcuitest... [Appium] Attempting to load driver uiautomator2... [Appium] Appium REST http interface listener started on 0.0.0.0:4723 [Appium] Available drivers: [Appium] - xcuitest@3.53.1 (automationName 'XCUITest') [Appium] - uiautomator2@1.67.0 (automationName 'UiAutomator2') Step 4: Install Java and set JAVA_HOME Either install Java from oracle site or the OpenJDK version Oracle download site Open jdk On macOS: brew install openjdk@8 sudo ln -sfn /usr/local/opt/openjdk@8/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk-8.jdk Add JDK home path as JAVA_HOME variable export JAVA_HOME=/Library/Java/JavaVirtualMachines/openjdk-8.jdk/Home export PATH=$JAVA_HOME/bin:$PATH Step 5: Verify dependencies are installed with Appium Doctor Appium doctor is a CLI that provides insights on what dependencies are missing as well as how to install them Make sure all required dependencies are installed npm install -g appium-doctor Run: # For both android and iOS appium-doctor # For only android appium-doctor --android # For only iOS appium-doctor --ios For example: If I run it at this point of time, it intelligently warns me about below: References Getting started Installing Appium 2.0 and the Driver and Plugins CLI Getting Started with Appium 2.0 Beta First Look at Appium 2.0 and New Drivers","title":"Common libraries and setup \u2692\ufe0f"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/04-common-libraries/#common-libraries-and-setup","text":"","title":"Common libraries and setup \u2692\ufe0f"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/04-common-libraries/#step-1-install-homebrew","text":"We'll need it to install npm and node Install instructions To Install on macOS /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\" On Linux or WSL (Windows subsystem for linux): You may need to install linuxbrew","title":"Step 1: Install homebrew"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/04-common-libraries/#step-2-install-node-and-npm","text":"Instructions Download and install node (10+) for your platform Prefer choosing LTS (Long term support version) On macOS: brew install node Verify running below command returns version: node -v And verify for npm as well npm -v","title":"Step 2: Install node and npm"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/04-common-libraries/#step-3-install-appium-server","text":"Run below command: npm install -g appium \ud83d\udd3a Do not use sudo to install appium server -g indicates that this package would be installed globally Verify appium server is installed \u279c appium-fast-boilerplate git:(main) appium [Appium] Welcome to Appium v1.17.0 [Appium] Appium REST http interface listener started on 0.0.0.0:4723 You will see all server logs in this terminal window.","title":"Step 3: Install Appium server"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/04-common-libraries/#appium-20","text":"To install appium 2.0 npm install -g appium@next You'll get an output like /usr/local/bin/appium -> /usr/local/lib/node_modules/appium/build/lib/main.js > appium@2.0.0-beta.16 postinstall /usr/local/lib/node_modules/appium > node ./postinstall.js Not auto-installing any drivers or plugins + appium@2.0.0-beta.16 added 113 packages from 587 contributors, removed 316 packages, updated 136 packages and moved 5 packages in 81.611s Next up, We'll install android and iOS drivers for this project appium driver install xcuitest appium driver install uiautomator2 You can list all available drivers using appium driver list Or only installed drivers using appium driver list --installed After running appium command, you'll see an output like this and as you can see our installed drivers [Appium] Welcome to Appium v2.0.0-beta.16 [Appium] Non-default server args: [Appium] tmpDir: /var/folders/5d/flg6q03n3j7769kffzly2x_r0000gp/T [Appium] Attempting to load driver xcuitest... [Appium] Attempting to load driver uiautomator2... [Appium] Appium REST http interface listener started on 0.0.0.0:4723 [Appium] Available drivers: [Appium] - xcuitest@3.53.1 (automationName 'XCUITest') [Appium] - uiautomator2@1.67.0 (automationName 'UiAutomator2')","title":"Appium 2.0 \ud83d\ude80"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/04-common-libraries/#step-4-install-java-and-set-java_home","text":"Either install Java from oracle site or the OpenJDK version Oracle download site Open jdk On macOS: brew install openjdk@8 sudo ln -sfn /usr/local/opt/openjdk@8/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk-8.jdk Add JDK home path as JAVA_HOME variable export JAVA_HOME=/Library/Java/JavaVirtualMachines/openjdk-8.jdk/Home export PATH=$JAVA_HOME/bin:$PATH","title":"Step 4: Install Java and set JAVA_HOME"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/04-common-libraries/#step-5-verify-dependencies-are-installed-with-appium-doctor","text":"Appium doctor is a CLI that provides insights on what dependencies are missing as well as how to install them Make sure all required dependencies are installed npm install -g appium-doctor Run: # For both android and iOS appium-doctor # For only android appium-doctor --android # For only iOS appium-doctor --ios For example: If I run it at this point of time, it intelligently warns me about below:","title":"Step 5: Verify dependencies are installed with Appium Doctor"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/04-common-libraries/#references","text":"Getting started Installing Appium 2.0 and the Driver and Plugins CLI Getting Started with Appium 2.0 Beta First Look at Appium 2.0 and New Drivers","title":"References"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/05-setup-for-android/","text":"Setup for Android \ud83e\udd16 Step 1: Install Android Studio We need command line tools like adb, emulators etc to work with android Easiest way is to download and install Android studio Once installed make sure SDK tools are installed via SDK manager Add below environment variables: On Mac/Linux: In .bash_profile or .zshrc (followed by running source .zshrc ) On Windows: Add them in your System environments variables on Windows export ANDROID_HOME=$HOME/Library/Android/sdk export PATH=$ANDROID_HOME/emulator:$PATH export PATH=$ANDROID_HOME/tools:$PATH export PATH=$ANDROID_HOME/tools/bin:$PATH export PATH=$ANDROID_HOME/platform-tools:$PATH Verify adb (android debug bridge) is installed \u279c appium-fast-boilerplate git:(main) adb Android Debug Bridge version 1.0.41 Version 30.0.5-6877874 Installed as /Users/gauravsingh/Library/Android/sdk/platform-tools/adb \ud83e\udd73 Milestone: Congratulations! We've setup everything for android tests! \ud83d\ude09","title":"Setup for Android \ud83e\udd16"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/05-setup-for-android/#setup-for-android","text":"","title":"Setup for Android \ud83e\udd16"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/05-setup-for-android/#step-1-install-android-studio","text":"We need command line tools like adb, emulators etc to work with android Easiest way is to download and install Android studio Once installed make sure SDK tools are installed via SDK manager Add below environment variables: On Mac/Linux: In .bash_profile or .zshrc (followed by running source .zshrc ) On Windows: Add them in your System environments variables on Windows export ANDROID_HOME=$HOME/Library/Android/sdk export PATH=$ANDROID_HOME/emulator:$PATH export PATH=$ANDROID_HOME/tools:$PATH export PATH=$ANDROID_HOME/tools/bin:$PATH export PATH=$ANDROID_HOME/platform-tools:$PATH Verify adb (android debug bridge) is installed \u279c appium-fast-boilerplate git:(main) adb Android Debug Bridge version 1.0.41 Version 30.0.5-6877874 Installed as /Users/gauravsingh/Library/Android/sdk/platform-tools/adb \ud83e\udd73 Milestone: Congratulations! We've setup everything for android tests! \ud83d\ude09","title":"Step 1: Install Android Studio"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/06-setup-android-emulator/","text":"Setup android emulator or real device \ud83e\udd16 Setting up emulator Let's launch our first emulator Open android studio > Click configure > Click on AVD Manager Create new emulator Select a base emulator image model Tip: Choose image that have play store option enabled Select android version, download the appropriate version for your test Give the emulator a name Play and start your emulator Setting up real device Easiest setup is to connect your real device via USB Go to About phone Tap on Android build number multiple times until developer mode is enabled Go to Developer Options and Enable USB debugging","title":"Setup android emulator or real device \ud83e\udd16"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/06-setup-android-emulator/#setup-android-emulator-or-real-device","text":"","title":"Setup android emulator or real device \ud83e\udd16"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/06-setup-android-emulator/#setting-up-emulator","text":"Let's launch our first emulator Open android studio > Click configure > Click on AVD Manager Create new emulator Select a base emulator image model Tip: Choose image that have play store option enabled Select android version, download the appropriate version for your test Give the emulator a name Play and start your emulator","title":"Setting up emulator"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/06-setup-android-emulator/#setting-up-real-device","text":"Easiest setup is to connect your real device via USB Go to About phone Tap on Android build number multiple times until developer mode is enabled Go to Developer Options and Enable USB debugging","title":"Setting up real device"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/07-setup-appium-desktop/","text":"Appium Desktop \ud83d\udda5\ufe0f Step 1: Download appium desktop Appium desktop github releases for your platform Step 2: Click on Start server Verify server started correctly Step 3: Adding Java and Android home Select Presets > Edit Configuration Add paths to JAVA_HOME and ANDROID_HOME variables On mac echo $JAVA_HOME echo $ANDROID_HOME Step 4: Adding capabilities Add capabilities JSON and then save it Also Save As with a familiar name Sample capabilities Android { \"platformName\": \"android\", \"automationName\": \"uiautomator2\", \"platformVersion\": \"10\", \"deviceName\": \"Automation\", \"app\": \"/<absolute_path_to_project>/src/test/resources/ApiDemos-debug.apk\", \"appPackage\": \"io.appium.android.apis\", \"appActivity\": \"io.appium.android.apis.ApiDemos\" } To find appPackage or appActivity , you can follow a blog I wrote earlier Finding out package and activity name via adb for appium automation iOS { \"platformName\": \"iOS\", \"automationName\": \"XCUITest\", \"deviceName\": \"iPhone 12 Pro Max\", \"app\": \"/<absolute_path_to_project>/src/test/resources/TestApp.app.zip\" } For real device: { \"bundleId\": \"<your_app_bundle_id>\", \"automationName\": \"XCUITest\", \"xcodeOrgId\": \"<your_team_name>\", \"xcodeSigningId\": \"iPhone Developer\", \"waitForQuiescence\": false, \"useNewWDA\": false, \"wdaStartupRetries\": 2, \"resetOnSessionStartOnly\": false, \"useJSONSource\": true, \"shouldUseSingletonTestManager\": false, \"wdaLaunchTimeout\": \"999999999\", \"wdaConnectionTimeout\": \"999999999\", \"autoAcceptAlerts\": true, \"autoDismissAlerts\": false } Step 5: Launch Appium Desktop or Appium Inspector to start investigating Note: Appium project recently split Appium Desktop (Server + Inspector) into a separate inspector. Using this, you can run appium server via command line and just use inspector (It's also a light weight install). You can download the app from here","title":"Appium Desktop \ud83d\udda5\ufe0f"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/07-setup-appium-desktop/#appium-desktop","text":"","title":"Appium Desktop \ud83d\udda5\ufe0f"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/07-setup-appium-desktop/#step-1-download-appium-desktop","text":"Appium desktop github releases for your platform","title":"Step 1: Download appium desktop"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/07-setup-appium-desktop/#step-2-click-on-start-server","text":"Verify server started correctly","title":"Step 2: Click on Start server"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/07-setup-appium-desktop/#step-3-adding-java-and-android-home","text":"Select Presets > Edit Configuration Add paths to JAVA_HOME and ANDROID_HOME variables On mac echo $JAVA_HOME echo $ANDROID_HOME","title":"Step 3: Adding Java and Android home"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/07-setup-appium-desktop/#step-4-adding-capabilities","text":"Add capabilities JSON and then save it Also Save As with a familiar name Sample capabilities","title":"Step 4: Adding capabilities"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/07-setup-appium-desktop/#android","text":"{ \"platformName\": \"android\", \"automationName\": \"uiautomator2\", \"platformVersion\": \"10\", \"deviceName\": \"Automation\", \"app\": \"/<absolute_path_to_project>/src/test/resources/ApiDemos-debug.apk\", \"appPackage\": \"io.appium.android.apis\", \"appActivity\": \"io.appium.android.apis.ApiDemos\" } To find appPackage or appActivity , you can follow a blog I wrote earlier Finding out package and activity name via adb for appium automation","title":"Android"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/07-setup-appium-desktop/#ios","text":"{ \"platformName\": \"iOS\", \"automationName\": \"XCUITest\", \"deviceName\": \"iPhone 12 Pro Max\", \"app\": \"/<absolute_path_to_project>/src/test/resources/TestApp.app.zip\" } For real device: { \"bundleId\": \"<your_app_bundle_id>\", \"automationName\": \"XCUITest\", \"xcodeOrgId\": \"<your_team_name>\", \"xcodeSigningId\": \"iPhone Developer\", \"waitForQuiescence\": false, \"useNewWDA\": false, \"wdaStartupRetries\": 2, \"resetOnSessionStartOnly\": false, \"useJSONSource\": true, \"shouldUseSingletonTestManager\": false, \"wdaLaunchTimeout\": \"999999999\", \"wdaConnectionTimeout\": \"999999999\", \"autoAcceptAlerts\": true, \"autoDismissAlerts\": false }","title":"iOS"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/07-setup-appium-desktop/#step-5-launch-appium-desktop-or-appium-inspector-to-start-investigating","text":"Note: Appium project recently split Appium Desktop (Server + Inspector) into a separate inspector. Using this, you can run appium server via command line and just use inspector (It's also a light weight install). You can download the app from here","title":"Step 5: Launch Appium Desktop or Appium Inspector to start investigating"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/08-hello-world-android/","text":"Hello world! Android \ud83d\ude4c Sample apps We'll use APIDemos app from appium, download the apk from below Sample apps Overall flow Your first test This test performs below: Opens app Opens Log Text box and taps on Add once Verifies the log text is displayed import constants.TestGroups; import org.testng.Assert; import org.testng.annotations.Test; import pages.apidemos.home.APIDemosHomePage; public class AndroidTest extends BaseTest { @Test(groups = {TestGroups.ANDROID}) public void testLogText() { String logText = new APIDemosHomePage(this.driver) .openText() .tapOnLogTextBox() .tapOnAddButton() .getLogText(); Assert.assertEquals(logText, \"This is a test\"); } } Driver setup in Base Test We spin up driver instance in BaseTest class import constants.Target; import core.driver.DriverManager; import core.utils.PropertiesReader; import exceptions.PlatformNotSupportException; import io.appium.java_client.AppiumDriver; import org.testng.ITestContext; import org.testng.annotations.AfterMethod; import org.testng.annotations.BeforeMethod; import java.io.IOException; public class BaseTest { protected AppiumDriver driver; protected PropertiesReader reader = new PropertiesReader(); @BeforeMethod(alwaysRun = true) public void setup(ITestContext context) { context.setAttribute(\"target\", reader.getTarget()); try { Target target = (Target) context.getAttribute(\"target\"); this.driver = new DriverManager().getInstance(target); } catch (IOException | PlatformNotSupportException e) { e.printStackTrace(); } } @AfterMethod(alwaysRun = true) public void teardown() { driver.quit(); } } Driver manager to setup Appium Driver We use this reusable class to: Read capabilities JSON file based on platform Setup a local driver instance with these capabilities This class could independently evolve to setup desired driver instances, either local, in house or remote cloud lab package core.driver; import constants.Target; import exceptions.PlatformNotSupportException; import io.appium.java_client.AppiumDriver; import org.openqa.selenium.remote.DesiredCapabilities; import java.io.IOException; import java.net.MalformedURLException; import java.net.URL; import java.util.HashMap; import static core.utils.CapabilitiesHelper.readAndMakeCapabilities; public class DriverManager { private static AppiumDriver driver; // For Appium < 2.0, append /wd/hub to the APPIUM_SERVER_URL String APPIUM_SERVER_URL = \"http://127.0.0.1:4723\"; public AppiumDriver getInstance(Target target) throws IOException, PlatformNotSupportException { System.out.println(\"Getting instance of: \" + target.name()); switch (target) { case ANDROID: return getAndroidDriver(); case IOS: return getIOSDriver(); default: throw new PlatformNotSupportException(\"Please provide supported target\"); } } private AppiumDriver getAndroidDriver() throws IOException { HashMap map = readAndMakeCapabilities(\"android-caps.json\"); return getDriver(map); } private AppiumDriver getIOSDriver() throws IOException { HashMap map = readAndMakeCapabilities(\"ios-caps.json\"); return getDriver(map); } private AppiumDriver getDriver(HashMap map) { DesiredCapabilities desiredCapabilities = new DesiredCapabilities(map); try { driver = new AppiumDriver( new URL(APPIUM_SERVER_URL), desiredCapabilities); } catch (MalformedURLException e) { e.printStackTrace(); } return driver; } } A Simple page object with Fluent pattern Below is an example page object class With 2 xpath locators annotated with @FindBy Notice we init elements in the constructor and also a BasePage class The test actions return either this or next page object to enable a fluent pattern public class APIDemosHomePage extends BasePage { @FindBy(xpath = \"//android.widget.TextView[@content-desc=\\\"Text\\\"]\") private WebElement textButton; @FindBy(xpath = \"//android.widget.TextView[@content-desc=\\\"LogTextBox\\\"]\") private WebElement logTextBoxButton; public APIDemosHomePage(AppiumDriver driver) { super(driver); PageFactory.initElements(driver, this); } public APIDemosHomePage openText() { click(textButton); return this; } public LogTextBoxPage tapOnLogTextBox() { waitForElementToBeVisible(logTextBoxButton); click(logTextBoxButton); return new LogTextBoxPage(driver); } } Base Page Every page object inherits from a BasePage that wraps appium methods This provides us an abstraction and allows us to create our own project specific reusable actions and methods A word of Caution \u26a0\ufe0f: Do not dump every method in this class, try to compose only relevant actions public class BasePage { protected AppiumDriver driver; public BasePage(AppiumDriver driver) { this.driver = driver; } public void click(WebElement elem) { elem.click(); } public String getText(WebElement elem) { return elem.getText(); } public void waitForElementToBeVisible(WebElement elem) { WebDriverWait wait = new WebDriverWait(driver, 10); wait.until(ExpectedConditions.visibilityOf(elem)); } }","title":"Hello world! Android \ud83d\ude4c"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/08-hello-world-android/#hello-world-android","text":"","title":"Hello world! Android \ud83d\ude4c"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/08-hello-world-android/#sample-apps","text":"We'll use APIDemos app from appium, download the apk from below Sample apps","title":"Sample apps"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/08-hello-world-android/#overall-flow","text":"","title":"Overall flow"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/08-hello-world-android/#your-first-test","text":"This test performs below: Opens app Opens Log Text box and taps on Add once Verifies the log text is displayed import constants.TestGroups; import org.testng.Assert; import org.testng.annotations.Test; import pages.apidemos.home.APIDemosHomePage; public class AndroidTest extends BaseTest { @Test(groups = {TestGroups.ANDROID}) public void testLogText() { String logText = new APIDemosHomePage(this.driver) .openText() .tapOnLogTextBox() .tapOnAddButton() .getLogText(); Assert.assertEquals(logText, \"This is a test\"); } }","title":"Your first test"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/08-hello-world-android/#driver-setup-in-base-test","text":"We spin up driver instance in BaseTest class import constants.Target; import core.driver.DriverManager; import core.utils.PropertiesReader; import exceptions.PlatformNotSupportException; import io.appium.java_client.AppiumDriver; import org.testng.ITestContext; import org.testng.annotations.AfterMethod; import org.testng.annotations.BeforeMethod; import java.io.IOException; public class BaseTest { protected AppiumDriver driver; protected PropertiesReader reader = new PropertiesReader(); @BeforeMethod(alwaysRun = true) public void setup(ITestContext context) { context.setAttribute(\"target\", reader.getTarget()); try { Target target = (Target) context.getAttribute(\"target\"); this.driver = new DriverManager().getInstance(target); } catch (IOException | PlatformNotSupportException e) { e.printStackTrace(); } } @AfterMethod(alwaysRun = true) public void teardown() { driver.quit(); } }","title":"Driver setup in Base Test"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/08-hello-world-android/#driver-manager-to-setup-appium-driver","text":"We use this reusable class to: Read capabilities JSON file based on platform Setup a local driver instance with these capabilities This class could independently evolve to setup desired driver instances, either local, in house or remote cloud lab package core.driver; import constants.Target; import exceptions.PlatformNotSupportException; import io.appium.java_client.AppiumDriver; import org.openqa.selenium.remote.DesiredCapabilities; import java.io.IOException; import java.net.MalformedURLException; import java.net.URL; import java.util.HashMap; import static core.utils.CapabilitiesHelper.readAndMakeCapabilities; public class DriverManager { private static AppiumDriver driver; // For Appium < 2.0, append /wd/hub to the APPIUM_SERVER_URL String APPIUM_SERVER_URL = \"http://127.0.0.1:4723\"; public AppiumDriver getInstance(Target target) throws IOException, PlatformNotSupportException { System.out.println(\"Getting instance of: \" + target.name()); switch (target) { case ANDROID: return getAndroidDriver(); case IOS: return getIOSDriver(); default: throw new PlatformNotSupportException(\"Please provide supported target\"); } } private AppiumDriver getAndroidDriver() throws IOException { HashMap map = readAndMakeCapabilities(\"android-caps.json\"); return getDriver(map); } private AppiumDriver getIOSDriver() throws IOException { HashMap map = readAndMakeCapabilities(\"ios-caps.json\"); return getDriver(map); } private AppiumDriver getDriver(HashMap map) { DesiredCapabilities desiredCapabilities = new DesiredCapabilities(map); try { driver = new AppiumDriver( new URL(APPIUM_SERVER_URL), desiredCapabilities); } catch (MalformedURLException e) { e.printStackTrace(); } return driver; } }","title":"Driver manager to setup Appium Driver"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/08-hello-world-android/#a-simple-page-object-with-fluent-pattern","text":"Below is an example page object class With 2 xpath locators annotated with @FindBy Notice we init elements in the constructor and also a BasePage class The test actions return either this or next page object to enable a fluent pattern public class APIDemosHomePage extends BasePage { @FindBy(xpath = \"//android.widget.TextView[@content-desc=\\\"Text\\\"]\") private WebElement textButton; @FindBy(xpath = \"//android.widget.TextView[@content-desc=\\\"LogTextBox\\\"]\") private WebElement logTextBoxButton; public APIDemosHomePage(AppiumDriver driver) { super(driver); PageFactory.initElements(driver, this); } public APIDemosHomePage openText() { click(textButton); return this; } public LogTextBoxPage tapOnLogTextBox() { waitForElementToBeVisible(logTextBoxButton); click(logTextBoxButton); return new LogTextBoxPage(driver); } }","title":"A Simple page object with Fluent pattern"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/08-hello-world-android/#base-page","text":"Every page object inherits from a BasePage that wraps appium methods This provides us an abstraction and allows us to create our own project specific reusable actions and methods A word of Caution \u26a0\ufe0f: Do not dump every method in this class, try to compose only relevant actions public class BasePage { protected AppiumDriver driver; public BasePage(AppiumDriver driver) { this.driver = driver; } public void click(WebElement elem) { elem.click(); } public String getText(WebElement elem) { return elem.getText(); } public void waitForElementToBeVisible(WebElement elem) { WebDriverWait wait = new WebDriverWait(driver, 10); wait.until(ExpectedConditions.visibilityOf(elem)); } }","title":"Base Page"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/09-setup-for-ios/","text":"Setup for iOS \ud83d\udcf1 Step 1: Install XCode Select xcode-select --install Step 2: Install carthage Allows to add frameworks to Cocoa applications Allows to build dependencies brew install carthage Step 3: Install libimobiledevice A library to communicate with services on iOS devices using native protocols. brew install libimobiledevice Step 4: Install ios-deploy Install and debug iOS apps from the command line brew install ios-deploy Step 5: Install ios-webkit-debug-proxy ios_webkit_debug_proxy (aka iwdp ) proxies requests from usbmuxd daemon over a websocket connection Allows developers to send commands to MobileSafari and UIWebViews on real and simulated iOS devices. brew install ios-webkit-debug-proxy Step 6: Optional iOS dependencies IDB (iOS Device bridge) Instructions brew tap facebook/fb brew install idb-companion pip3.6 install fb-idb References appium-xcuitest-driver The XCUITest Driver for iOS Real device setup How to setup iOS Automation on Mac OS How To Test On Real iOS Devices With Appium, Part 1","title":"Setup for iOS \ud83d\udcf1"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/09-setup-for-ios/#setup-for-ios","text":"","title":"Setup for iOS \ud83d\udcf1"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/09-setup-for-ios/#step-1-install-xcode-select","text":"xcode-select --install","title":"Step 1: Install XCode Select"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/09-setup-for-ios/#step-2-install-carthage","text":"Allows to add frameworks to Cocoa applications Allows to build dependencies brew install carthage","title":"Step 2: Install carthage"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/09-setup-for-ios/#step-3-install-libimobiledevice","text":"A library to communicate with services on iOS devices using native protocols. brew install libimobiledevice","title":"Step 3: Install libimobiledevice"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/09-setup-for-ios/#step-4-install-ios-deploy","text":"Install and debug iOS apps from the command line brew install ios-deploy","title":"Step 4: Install ios-deploy"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/09-setup-for-ios/#step-5-install-ios-webkit-debug-proxy","text":"ios_webkit_debug_proxy (aka iwdp ) proxies requests from usbmuxd daemon over a websocket connection Allows developers to send commands to MobileSafari and UIWebViews on real and simulated iOS devices. brew install ios-webkit-debug-proxy","title":"Step 5: Install ios-webkit-debug-proxy"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/09-setup-for-ios/#step-6-optional-ios-dependencies","text":"","title":"Step 6: Optional iOS dependencies"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/09-setup-for-ios/#idb-ios-device-bridge","text":"Instructions brew tap facebook/fb brew install idb-companion pip3.6 install fb-idb","title":"IDB (iOS Device bridge)"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/09-setup-for-ios/#references","text":"appium-xcuitest-driver The XCUITest Driver for iOS Real device setup How to setup iOS Automation on Mac OS How To Test On Real iOS Devices With Appium, Part 1","title":"References"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/10-hello-world-ios/","text":"Hello world! iOS \ud83d\udcf1 Your first Test import org.testng.Assert; import org.testng.annotations.Test; import pages.testapp.home.HomePage; public class IOSTest extends BaseTest { @Test public void addNumbers() { String actualSum = new HomePage(this.driver) .enterTwoNumbersAndCompute(\"5\", \"5\") .getSum(); Assert.assertEquals(actualSum, \"10\"); } } Page object package pages.testapp.home; import core.page.BasePage; import io.appium.java_client.AppiumDriver; import org.openqa.selenium.By; import org.openqa.selenium.WebElement; import org.openqa.selenium.support.FindBy; import org.openqa.selenium.support.PageFactory; public class HomePage extends BasePage { @FindBy(name = \"TextField1\") private WebElement firstNumber; @FindBy(name = \"TextField2\") private WebElement secondNumber; @FindBy(name = \"ComputeSumButton\") private WebElement computeSumButton; @FindBy(name = \"Answer\") private WebElement answer; public HomePage(AppiumDriver driver) { super(driver); PageFactory.initElements(driver, this); } public HomePage typeFirstNumber(String number) { type(firstNumber, number); return this; } public HomePage typeSecondNumber(String number) { type(secondNumber, number); return this; } public HomePage compute() { click(computeSumButton); return this; } public String getSum() { waitForElementToBePresent(By.name(\"Answer\")); return getText(answer); } public HomePage enterTwoNumbersAndCompute(String first, String second) { typeFirstNumber(first); typeSecondNumber(second); compute(); return this; } }","title":"Hello world! iOS \ud83d\udcf1"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/10-hello-world-ios/#hello-world-ios","text":"","title":"Hello world! iOS \ud83d\udcf1"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/10-hello-world-ios/#your-first-test","text":"import org.testng.Assert; import org.testng.annotations.Test; import pages.testapp.home.HomePage; public class IOSTest extends BaseTest { @Test public void addNumbers() { String actualSum = new HomePage(this.driver) .enterTwoNumbersAndCompute(\"5\", \"5\") .getSum(); Assert.assertEquals(actualSum, \"10\"); } }","title":"Your first Test"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/10-hello-world-ios/#page-object","text":"package pages.testapp.home; import core.page.BasePage; import io.appium.java_client.AppiumDriver; import org.openqa.selenium.By; import org.openqa.selenium.WebElement; import org.openqa.selenium.support.FindBy; import org.openqa.selenium.support.PageFactory; public class HomePage extends BasePage { @FindBy(name = \"TextField1\") private WebElement firstNumber; @FindBy(name = \"TextField2\") private WebElement secondNumber; @FindBy(name = \"ComputeSumButton\") private WebElement computeSumButton; @FindBy(name = \"Answer\") private WebElement answer; public HomePage(AppiumDriver driver) { super(driver); PageFactory.initElements(driver, this); } public HomePage typeFirstNumber(String number) { type(firstNumber, number); return this; } public HomePage typeSecondNumber(String number) { type(secondNumber, number); return this; } public HomePage compute() { click(computeSumButton); return this; } public String getSum() { waitForElementToBePresent(By.name(\"Answer\")); return getText(answer); } public HomePage enterTwoNumbersAndCompute(String first, String second) { typeFirstNumber(first); typeSecondNumber(second); compute(); return this; } }","title":"Page object"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/11-bonus/","text":"Bonus Tools \ud83e\uddf0 Screen share on android Scrcpy from Genymobile to screen share a read device brew install scrcpy brew install android-platform-tools Android UI Automator Viewer On Android, you can use uiautomatorviewer to also capture the app XML tree to find suitable locators Launch it by running below from your terminal /Library/Android/sdk/tools/bin/uiautomatorviewer/ ADB Commands Read Using adb and cmdline to ease android app testing Macaca App Inspector Macaca is an alternate app inspector to Appium Desktop npm install macaca-cli -g macaca doctor npm install app-inspector -g","title":"Bonus Tools \ud83e\uddf0"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/11-bonus/#bonus-tools","text":"","title":"Bonus Tools \ud83e\uddf0"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/11-bonus/#screen-share-on-android","text":"Scrcpy from Genymobile to screen share a read device brew install scrcpy brew install android-platform-tools","title":"Screen share on android"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/11-bonus/#android-ui-automator-viewer","text":"On Android, you can use uiautomatorviewer to also capture the app XML tree to find suitable locators Launch it by running below from your terminal /Library/Android/sdk/tools/bin/uiautomatorviewer/","title":"Android UI Automator Viewer"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/11-bonus/#adb-commands","text":"Read Using adb and cmdline to ease android app testing","title":"ADB Commands"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/11-bonus/#macaca-app-inspector","text":"Macaca is an alternate app inspector to Appium Desktop npm install macaca-cli -g macaca doctor npm install app-inspector -g","title":"Macaca App Inspector"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/12-fin/","text":"The end? Or the beginning?: Where do you go next? \u262f\ufe0f Thank you for your kind attention \ud83d\ude4c Any questions or feedback? Please reach out on any of the channels at automationhacks.io Further resources for Learning about Appium Appium.io Appium.io Getting started Execute Automation Introduction to Appium -- Part 1 (Understanding Appium Series) Setting stage ready for Appium in Eclipse -- Part 1 (Appium with Java series) Automation Step by Step Appium Beginner Tutorial 1 | What is Appium All the best on your appium journey! You got this \ud83d\udc4d\ud83d\ude09!","title":"The end? Or the beginning?: Where do you go next? \u262f\ufe0f"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/12-fin/#the-end-or-the-beginning-where-do-you-go-next","text":"Thank you for your kind attention \ud83d\ude4c Any questions or feedback? Please reach out on any of the channels at automationhacks.io","title":"The end? Or the beginning?: Where do you go next? \u262f\ufe0f"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/12-fin/#further-resources-for-learning-about-appium","text":"","title":"Further resources for Learning about Appium"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/12-fin/#appiumio","text":"Appium.io Getting started","title":"Appium.io"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/12-fin/#execute-automation","text":"Introduction to Appium -- Part 1 (Understanding Appium Series) Setting stage ready for Appium in Eclipse -- Part 1 (Appium with Java series)","title":"Execute Automation"},{"location":"2021/appium-conf/hello-appium-writing-your-first-tests/12-fin/#automation-step-by-step","text":"Appium Beginner Tutorial 1 | What is Appium All the best on your appium journey! You got this \ud83d\udc4d\ud83d\ude09!","title":"Automation Step by Step"}]}