# Sensible patterns and practices 😇

## Atomic tests ⚛️

- Write targeted tests
- Ideally, Max 2 assertions per test 2️⃣
- Use API/Inject JS/Cookies/Modify DB to set application state ⏩
- Outcome of one test should not cause another to fail
  - Don't chain tests

> 💡Follow
> [TRIMS](https://automationintesting.com/2019/08/trims-automation-in-testing-strategy.html)

## Use **API or DB** for data setup/teardown

- Selenium is not a silver bullet
- Use your apps API/cookies/DB to setup and teardown data

## Arrange act assert

- Setup data/state
- Perform a test
- Assert on the state
- **Cleanup**

> **Given/When/Then** is same in spirit

## Run tests in **parallel** from the start 🏃 🏃 🏃

- Atomic tests work great in parallel 🤝
- New webdriver instance for every test 💯
- Do **NOT** use static keyword/shared state

## Page object

- Write page objects for **components** within pages
  - Compose multiple into common page
- Well named, and specify intent
- Don't have webdriver API calls directly in page objects,
  - Instead inherit/compose from a base page

## Fluent pattern 🏃

![To do with 2 notes added](images/todo.png)

```java
@Test(groups = Tags.REGRESSION)
public void testToDoItemsLeft() {
    HomePage home = new HomePage(driver);
    home.addTodo("Get work done");
    home.addTodo("relax");
    ...
}
```

```java
@Test(groups = Tags.REGRESSION)
public void testToDoItemsLeft() {
    // More readable 😄
    HomePage home = new HomePage(driver)
            .addTodo("Get work done")
            .addTodo("relax");
    ...
}
```

How is this enabled?

> 💡return either the **current page object** or the **next page object** to enable fluent methods

```java
public HomePage addTodo(String todoNote) {
        enterText(todo, todoNote);
        pressEnter(todo);
        return this;
    }
```

Can use this in assertions as well

```java
// TestNG assert
Assert.assertEquals(addedTodosText, note);

// Google truths fluent assert
assertThat(addedTodosText).isEqualTo(note);
```

## Page factory

- Caches looked up elements on instantiation
- Don't use for elements that can change (AJAX)

```java
public class HomePage extends BasePage {
    public HomePage(WebDriver driver) {
        super(driver);
        PageFactory.initElements(driver, this);
    }

    @FindBy(css = "#root input")
    WebElement todo;

    @FindBy(xpath = "//ul[@class='todo-list']//label")
    List<WebElement> todos;

    String addedNote =
            "//ul[@class='todo-list']//label[contains(text(), '%s')]";

    ...

    public HomePage addTodo(String todoNote) {
        enterText(todo, todoNote);
        pressEnter(todo);
        return this;
    }
    ...
}
```

## Screenplay pattern

-

## Builder pattern

- Use this to construct complex data objects instead of a single giant constructor with multiple
  params
